/**
 * @file Defines built-in events from Panorama's events system
 * @see https://github.com/StrataSource/pano-typed/
 */

interface PanelEventNameMap {
	'Activated':							(sourceID: string, source: PanelEventSource) => void,
	'AddStyle':								(cls: string) => void,
	'AddStyleToEachChild':					(cls: string) => void,
	'AvatarImageLoaded': 					() => void,
	'Cancelled':							(sourceID: string, source: PanelEventSource) => void,
	'CarouselAutoScroll':					(autoscroll_id: number) => void,
	'CarouselChildrenChanged':				(sourceID: string) => void,
	'CarouselNavIncrementSelectedIndex':	(inc: number) => void,
	'CarouselNavSetSelectedIndex':			(index: number) => void,
	'CheckChildrenScrolledInputView':		() => void,
	'ClearImageSource':						() => void,
	/** This is right-clicking! */
	'ContextMenu':							(sourceID: string, source: PanelEventSource) => void,
	'ContextMenuEvent':						(eventText: string) => void,
	'DragStart':							(sourceID: string, info: DragEventInfo) => void,
	'DropDownSelectedionChanged':			() => void,
	'DropInputFocus':						() => void,
	'DualSliderValueChanged':				(value1: float, value2: float) => void,
	'GenericPopupButtonClicked':			() => void,
	'GenericTextEntryPopupButtonClicked':	() => void,
	'IfHasClassEvent':						(cls: string, eventToFire: string) => void,
	'IfHoverOtherEvent':					(othersourceID: string, eventToFire: string) => void,
	'IfNotHasClassEvent':					(cls: string, eventToFire: string) => void,
	'IfNotHoverOtherEvent':					(othersourceID: string, eventToFire: string) => void,
	'ImageFailedLoad':						() => void,
	'InputFocusLost':						(panel: GenericPanel) => void,
	'KeyBinderNewBind':						() => void,
	'MouseScroll':							(scroll: int32) => void,
	'MovePanelDown':						(repeatCount: int32) => void,
	'MovePanelLeft':						(repeatCount: int32) => void,
	'MovePanelRight':						(repeatCount: int32) => void,
	'MovePanelUp':							(repeatCount: int32) => void,
	'NStateButtonStateChanged':				(sourceID: string, state: int32) => void,
	'NStateButtonStateReset':				(sourceID: string, state: int32) => void,
	'NumberEntryChanged':					() => void,
	'PagePanelDown':						() => void,
	'PagePanelLeft':						() => void,
	'PagePanelRight':						() => void,
	'PagePanelUp':							() => void,
	'PanelLoaded':							() => void,
	'PanelStyleChanged':					() => void,
	'PanoramaCastVoteNo':					() => void,
	'PanoramaCastVoteYes':					() => void,
	'PropertyTransitionEnd':				(sourceID: string, propertyName: keyof Style) => void,
	'RadioSelected':						(selected: string) => void,
	'RemoveStyle':							(cls: string) => void,
	'RemoveStyleFromEachChild':				(cls: string) => void,
	'ResetCarouselMouseWheelCounts':		() => void,
	/** Fired when panel has been scrolled */
	'Scroll':								() => void,
	'ScrolledIntoView':						() => void,
	'ScrollOutOfView':						() => void,
	'ScrollPanelDown':						() => void,
	'ScrollPanelIntoView':					(scrollBehavior: ScrollBehavior, immediate: boolean) => void,
	'ScrollPanelLeft':						() => void,
	'ScrollPanelRight':						() => void,
	'ScrollPanelUp':						() => void,
	'ScrollToBottom':						() => void,
	'ScrollToDelayLoadListItem':			(scrollIndex: int32, scrollBehavior: ScrollBehavior, immediateScroll: boolean) => void,
	'ScrollToTop':							() => void,
	'SetCarouselSelectedChild':				(sourceID: string) => void,
	'SetChildPanelsSelected':				(selected: boolean) => void,
	'SetImageSource':						(source: string) => void,
	'SetInputFocus':						() => void,
	'SetPanelEnabled':						(enabled: boolean) => void,
	'SetPanelSelected':						(selected: boolean) => void,
	'StyleClassesChanged':					() => void,
	'StyleFlagsChanged':					() => void,
	'SwitchStyle':							(slot: string, cls: string) => void,
	/** Call RaiseChangeEvents() to enable */
	'TextEntryChanged':						(text: string) => void,
	'TextEntryCopyFromClipboard':			() => void,
	'TextEntryCutFromClipboard':			() => void,
	'TextEntryHideTextInputHandler':		() => void,
	'TextEntryInsertFromClipboard':			() => void,
	/** @deprecated Use .text property */
	'TextEntrySetText':						(text: string) => void,
	'TextEntryShowTextInputHandler':		() => void,
	'TextEntrySubmit':						(text: string) => void,
	'TextEntryUpdate':						() => void,
	'TogglePanelSelected':					() => void,
	'ToggleStyle':							(cls: string) => void,
	'TooltipVisible':						(sourceID: string) => void,
	'TooltipHidden':						(sourceID: string) => void,
	'TriggerStyle':							(cls: string) => void,
	'UpdateFocusAndDirtyChildStyles':		() => void,
}

interface GlobalEventNameMap {
	'AsyncEvent':							(delay: duration, eventToFire: string) => void,
	'MainMenuResumeGame':					() => void,
	'MainMenuPauseGame':					() => void,
	'ShowPauseMenu':						() => void,
	'HidePauseMenu':						() => void,
	'ShowMainMenu':							() => void,
	'HideMainMenu':							() => void,
	'HudProcessInput':						() => void,
	'HudThink':								() => void,
	'ShowIntroMovie':						() => void,
	'HideIntroMovie':						() => void,
	'DemoPlaybackControl':					(str: string, flt: float) => void,
	'GameEventFired':						(event: string) => void,
	'LayoutReloaded':						() => void,
	'PageDown':								() => void,
	'PageLeft':								() => void,
	'PageRight':							() => void,
	'PageUp':								() => void,
	'PanoramaGameTimeJumpEvent':			(time: duration) => void,
	'ScrollDown':							() => void,
	'ScrollLeft':							() => void,
	'ScrollRight':							() => void,
	'ScrollUp':								() => void,
	'ShowCenterPrintText':					(message: string, priority: unknown) => void,
	'ShowVoteContextMenu':					() => void,
	'StaticHudMenu_EntrySelected':			(panel: Panel) => void,
	'UnloadLoadingScreenAndReinit':			() => void,
	'LevelInitPostEntity':					() => void,
	'NewConsoleMessages': 					() => void,
	'SliderFocusChanged':					(sourceID: string, focused: boolean) => void,
	'SliderProgressChanged':				(sourceID: string) => void,
	'SliderValueChanged':					(sourceID: string, value: float) => void,
	'SpinnerValueChanged':					(sourceID: string, value: float) => void,
	'ObserverTargetChanged':				(entIndex: int32) => void,
	'MapLoaded':							(map_name: string, is_background: boolean) => void,
	'MapUnloaded':							() => void,
	'Cancelled':							(sourceID: string, source: PanelEventSource) => void,
}

/** Represents the info object provided by a DragEvent */
interface DragEventInfo {
	removePositionBeforeDrop: boolean;
	offsetX: number;
	offsetY: number;
	displayPanel: Panel | null;
}
